[gd_resource type="VisualShader" load_steps=12 format=2]

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=5]
function = 31

[sub_resource type="VisualShaderNodeColorConstant" id=6]
constant = Color( 1, 0, 0, 1 )

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorSmoothStep" id=8]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0.1, 0.1, 0.1 ), 1, Vector3( 0.1, 0.1, 0.1 ), 2, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeVectorSmoothStep" id=9]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0.1, 0.1, 0.1 ), 1, Vector3( 0.1, 0.1, 0.1 ), 2, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeVectorFunc" id=10]
function = 34

[sub_resource type="VisualShaderNodeVectorDecompose" id=11]

[sub_resource type="VisualShaderNodeVectorDecompose" id=12]

[sub_resource type="VisualShaderNodeScalarOp" id=13]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=14]
operator = 2

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;




void vertex() {
// Output:0

}

void fragment() {
// Color:12
	vec3 n_out12p0 = vec3(1.000000, 0.000000, 0.000000);
	float n_out12p1 = 1.000000;

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorSmoothStep:3
	vec3 n_in3p1 = vec3(0.10000, 0.10000, 0.10000);
	vec3 n_in3p2 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out3p0 = smoothstep(n_out2p0, n_in3p1, n_in3p2);

// VectorDecompose:6
	float n_out6p0 = n_out3p0.x;
	float n_out6p1 = n_out3p0.y;
	float n_out6p2 = n_out3p0.z;

// ScalarOp:8
	float n_out8p0 = n_out6p0 * n_out6p1;

// VectorFunc:5
	vec3 n_out5p0 = vec3(1.0, 1.0, 1.0) - n_out2p0;

// VectorSmoothStep:4
	vec3 n_in4p1 = vec3(0.10000, 0.10000, 0.10000);
	vec3 n_in4p2 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out4p0 = smoothstep(n_out5p0, n_in4p1, n_in4p2);

// VectorDecompose:7
	float n_out7p0 = n_out4p0.x;
	float n_out7p1 = n_out4p0.y;
	float n_out7p2 = n_out4p0.z;

// ScalarOp:9
	float n_out9p0 = n_out7p0 * n_out7p1;

// ScalarOp:10
	float n_out10p0 = n_out8p0 * n_out9p0;

// ScalarFunc:11
	float n_out11p0 = 1.0 - n_out10p0;

// Output:0
	ALBEDO = n_out12p0;
	ALPHA = n_out11p0;

}

void light() {
// Output:0

}
"
nodes/fragment/0/position = Vector2( 1020, 280 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -400, 180 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -100, 180 )
nodes/fragment/4/node = SubResource( 9 )
nodes/fragment/4/position = Vector2( -120, 420 )
nodes/fragment/5/node = SubResource( 10 )
nodes/fragment/5/position = Vector2( -312.633, 334.209 )
nodes/fragment/6/node = SubResource( 11 )
nodes/fragment/6/position = Vector2( 132.367, 227.209 )
nodes/fragment/7/node = SubResource( 12 )
nodes/fragment/7/position = Vector2( 134.367, 470.209 )
nodes/fragment/8/node = SubResource( 13 )
nodes/fragment/8/position = Vector2( 400, 240 )
nodes/fragment/9/node = SubResource( 14 )
nodes/fragment/9/position = Vector2( 410.308, 501.209 )
nodes/fragment/10/node = SubResource( 4 )
nodes/fragment/10/position = Vector2( 600, 280 )
nodes/fragment/11/node = SubResource( 5 )
nodes/fragment/11/position = Vector2( 780, 340 )
nodes/fragment/12/node = SubResource( 6 )
nodes/fragment/12/position = Vector2( 760, 180 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 2, 0, 5, 0, 5, 0, 4, 0, 3, 0, 6, 0, 4, 0, 7, 0, 6, 0, 8, 0, 7, 0, 9, 0, 8, 0, 10, 0, 7, 1, 9, 1, 6, 1, 8, 1, 9, 0, 10, 1, 10, 0, 11, 0, 11, 0, 0, 1, 12, 0, 0, 0 )
